security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Administrator:
            algorithm: auto

    providers:
       # users_in_memory: { memory: null }
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Administrator
                property: email
    
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            #provider: users_in_memory
            form_login:
                # "signup_administrateur" is the name of the route created previously
                login_path: signup_administrateur
                check_path: signup_administrateur
          
                enable_csrf: true
            # custom_authenticator: App\Security\LoginFormAuthenticator
           
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            

          

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, IS_AUTHENTICATED_FULLY]
        # secured_area:
        #     # ...
        #     form_login:
        #         # ...

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
      
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    
        # require ROLE_ADMIN for /admin*
        # - { path: '^/admin/oeuvre/manage', roles: ROLE_ADMIN }
        # - { path: '^/admin/oeuvre/create', roles: ROLE_ADMIN }
        # - { path: '^/admin/oeuvre/delete/{id}', roles: ROLE_ADMIN }
        # - { path: '^/admin/oeuvre/update/{id}', roles: ROLE_ADMIN }

        # - { path: '^/admin/contact/delete/{id}', roles: ROLE_ADMIN }
        # - { path: '^/admin/contact', roles: ROLE_ADMIN }

        # - { path: '^/admin/administrateur/create', roles: ROLE_ADMIN }
        # - { path: '^/admin/administrateur/delete/{id}', roles: ROLE_ADMIN }
        # - { path: '^/admin/administrateur/delete/', roles: ROLE_ADMIN }

        # - { path: '^/admin/web-site', roles: ROLE_ADMIN }

         - { path: '^/admin/', roles: ROLE_SUPER_ADMIN }

      


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
